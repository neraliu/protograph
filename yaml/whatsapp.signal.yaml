title: Whatsapp Signal Protocol

footnote: |
  Notation: $(d, Q) <- `Curve25519()`$ is the key
  generation function that generates $d$ as
  private key and $Q$ as public key.

actor:
  - I: >
      initiator: $a$
  - S: server
  - R: >
      recipient: $b$

sequence:
  
  - I:
      S:
        arrow: $Q_{`I`_a}, Q_{`S`_a}, Q_{`O`_a}, `Sign`_{d_{`I`_a}}(Q_{`S`_a})$  # O_i_init..
        from: |
          Identity Key: $`I`_a = (d_{`I`_a}, Q_{`I`_a})  <- `Curve25519`()$
          Signed Pre Key: $`S`_a = (d_{`S`_a}, Q_{`S`_a}) <- `Curve25519`()$
          One-Time Pre Key: $`O`_a = (d_{`O`_a}, Q_{`O`_a})<- `Curve25519`()$

  - R:
      S:
        arrow: $Q_{`I`_b}, Q_{`S`_b}, Q_{`O`_b}, `Sign`_{d_{`I`_b}}(Q_{`S`_b})$  # O_i_init..
        from: |
          Identity Key: $`I`_b = (d_{`I`_b}, Q_{`I`_b})  <- `Curve25519`()$
          Signed Pre Key: $`S`_b = (d_{`S`_b}, Q_{`S`_b}) <- `Curve25519`()$
          One-Time Pre Key: $`O`_b = (d_{`O`_b}, Q_{`O`_b})<- `Curve25519`()$

  - I: {S: get recipient public keys}

  - S: {I: "$Q_{`I`_b}, Q_{`S`_b}, Q_{`O`_b}$"}


  - I:
      R:
        arrow: $Q_{`I`_a}, Q_{`E`_a}$
        from: |
          Ephemeral Key: $`E`_a = (d_{`E`_a}, Q_{`E`_a})<- `Curve25519`()$

  - I:
      R: # double arrow
        arrow: ECDH($`I`_a, `S`_b$)
        from: Exchange $K_1$
        to: Exchange $K_1$
        style: <->

  - I:
      R: # double arrow
        arrow: ECDH($`E`_a, `I`_b$)
        from: Exchange $K_2$
        to: Exchange $K_2$
        style: <->

  - I:
      R: # double arrow
        arrow: ECDH($`E`_a, `S`_b$)
        from: Exchange $K_3$
        to: Exchange $K_3$
        style: <->

  - I:
      R: # double arrow
        arrow: ECDH($`E`_a, `O`_b$)
        from: Exchange $K_4$
        to: Exchange $K_4$
        style: <->

  - I:
      R:
        color: white
        from: |
          $K_`master` <- K_1 || K_2 || K_3 || K_4 $
          $K_`root`, K_`chain` = `HKDF`(K_`master`)$

  - EMPTYLINE:

  - I:
      R:
        arrow: |
          cipher, signature, $Q_{`E`_a}$
        from: |
          Ephemeral Key: $`E`_a = (d_{`E`_a}, Q_{`E`_a})<- `Curve25519`()$
          $K_`message` = `HMAC`_{K_`chain`}(1) $
          $K_`chain` = `HMAC`_{K_`chain`}(2) $
          $`cipher` = `Encrypt`_{K_`message`}(`message`)$
          $`signature` = `HMAC`_{K_`message`}(`cipher`)$

        to: |
          $K_`master` <- K_1 || K_2 || K_3 || K_4 $
          $K_`root`, K_`chain` = `HKDF`(K_`master`)$
          $K_`message` = `HMAC`_{K_`chain`}(1) $
          $K_`chain` = `HMAC`_{K_`chain`}(2) $
          $`message` = `Decrypt`_{K_`message`}(`cipher`)$

  - EMPTYLINE:

  - I:
      R:
        color: white
        from: Keep sending new messages until recipient responds.

  - R: # if R responds
      I:
        arrow: $Q_{`E`_b}$
        from: |
          Ephemeral Key: $`E`_b = (d_{`E`_b}, Q_{`E`_b})<- `Curve25519`()$

  - I:
      R:
        arrow: ECDH($`E`_a, `E`_b$)
        style: <->
        from: |
          Exchange $K_`ephemeral`$
          $K_`chain`, K_`root` = `HKDF`(K_`root`, K_`ephemeral`)$
        to: |
          Exchange $K_`ephemeral`$
          $K_`chain`, K_`root` = `HKDF`(K_`root`, K_`ephemeral`)$

  - EMPTYLINE:

  - I:
      R:
        color: white
        from: |
          As $K_`chain`$ and $K_`root`$ are rolled,
          the rest of the protocol follows from above.
