title: TLS 1.3 Simplified

separation: 12

footnote: |
    Disclaimer: this diagram is a rough sketch of the TLS 1.3 handshake and record protocol. It serves as a quickstarter to understand the protocol flows. It may contain inaccurate or oversimplified representations. 

    1) TLS Settings
    Cipher Suite: TLS_AES_128_GCM_SHA256
    Digital Signature: ecdsa_secp256r1_sha256
    Key Exchange: secp256r1 (NIST P-256) with $(G, n)$ as part of domain parameters, with public and private key in the form of $(Q, d)$
    Pre-Shared Key Cipher: TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA384
    2) Protocol Notations
    Key Extraction Function: Extract(salt, keying material)
    Key Derive Function: Derive(secret, label, transcript), where transcript is the concatenation of each included handshake message.
    Encryption: \{plaintext\}$_{`key`}$, which denotes an AEAD-Encrypt operation with write key and IV generated from key.

actor:
- C: Client (a)
- S: Server (b)

sequence:

- C:
    S:
      from: |
        $`r`_`a` \xleftarrow{`random`} \{0,1\}^{256}$
        Ephermal key: $Q_`a` <- d_`a`G$
      arrow: |
        ClientHello: $r_`a`$
        KeyShare: $Q_`a`$

- S:
    C:
      from: |
        $S_`early` <- `Extract`(0, 0)$
        $`r`_`b` \xleftarrow{`random`} \{0,1\}^{256}$
        Ephermal key: $Q_`b` <- d_`b`G$
        Key exchanged via ECDHE: $x <- (x, y) = d_`a` Q_`b`$
      arrow: |
        ServerHello: $r_`b`$
        KeyShare: $Q_`b`$

- EMPTYLINE:

- S:
    C:
      color: white
      from: |
        $S_`handshake` <- `Extract`(`Derive`(S_`early`, `'derived'`, \emptyset), x)$
        $S_`master` <- `Extract`(`Derive`(S_`handshake`,`'derived'`, \emptyset), 0)$

- EMPTYLINE:

- S:
    C:
      from: |
        Handshake traffic key: $K_{`handshake`_b} <- `Derive`(S_`handshake`, `'s\ hs\ traffic'`, `transcript`)$
      to: |
        Handshake traffic key: $K_{`handshake`_a} <- `Derive`(S_`handshake`, `'c\ hs\ traffic'`, `transcript`)$
      arrow: |
        \{Certificate: Public key with CA signature\}$_{K_{`handshake`_b}}$

- S:
    C:
      from:
      arrow: |
        \{CertificateVerify: Transcript with ECDSA signature\}$_{K_{`handshake`_b}}$

- S:
    C:
      arrow: |
        \{Finished: HMAC($K_`finished`$, transcript)\}$_{K_{`handshake`_b}}$
      from: |
        Finished key: $K_`finished` <- `Derive`(K_{`handshake`_b}, `'finished'`, `transcript`)$

- C:
    S:
      arrow: |
        \{Finished: HMAC($K_`finished`$, transcript)\}$_{K_{`handshake`_a}}$
      from: |
        Finished key: $K_`finished` <- `Derive`(K_{`handshake`_a}, `'finished'`, `transcript`)$
      to: |
        $S_`resumption` <- `Derive`(S_`master`, `'res\ master'`, `transcript`)$


- S:
    C:
      arrow: |
        \{Application Data\}$_{K_{`b`_0}}$
      from: |
        Application traffic key: $K_{`b`_0} <- `Derive`(S_`master`, `'s\ ap\ traffic'`, `transcript`)$

- C:
    S:
      arrow: |
        \{Application Data\}$_{K_{`a`_0}}$
      from: |
        Application traffic key: $K_{`a`_0} <- `Derive`(S_`master`, `'c\ ap\ traffic'`, `transcript`)$

# - S:
#     C:
#       color: white
#       from: |
#         Application traffic key: $K_{`b`_{n+1}} <- `Derive`(K_{`b`_n}, `'traffic\ upd'`,  \emptyset)$
#       to: |
#         Application traffic key: $K_{`a`_{n+1}} <- `Derive`(K_{`a`_n}, `'traffic\ upd'`,  \emptyset)$

- S:
    C:
      arrow: |
        NewSessionTicket: \{session key ID, IV, encrypted state, HMAC(...)\}$_{K_{`b`_0}}$
      from: |
        Creates a pre-shared key (PSK) binding to enable session resumption

- C:
    S:
      arrow: (Connections terminated. That triggers session resumption with 0-RTT)
      style: dashed, <->
      color: red

- EMPTYLINE:

- EMPTYLINE:

- C:
    S:
      from: |
        $S_`early` <- `Extract`(0, S_`resumption`)$
        Binder key: $K_{`binder`} <- `Derive`(S_`early`, `'res\ binder'`, \emptyset)$
        Early Traffic Key: $K_{`early`} <- `Derive`(S_`early`, `'c\ e\ traffic'`, `transcript`)$
        Finished key: $K_`finished` <- `Derive`(K_{`binder`}, `'finished'`, `transcript`)$

      arrow: |
        ClientHello: ...
        KeyShare: ...
        PskKeyExchangeModes: 'psk_dhe_ke'
        EarlyDataIndication
        PreSharedKey: \{session key ID, HMAC($K_`finished`$, transcript)\}
        \{Application Data\}$_{K_{`early`}}$

- EMPTYLINE:

- S:
    C:
      arrow: |
        ServerHello: ...
        KeyShare: ...
        PreSharedKey: \{session key ID\}
        EncryptedExtensions: \{EarlyDataIndication\}$_{K_{`handshake`_b}}$
      from: |
        $S_`handshake` <- `Extract`(`Derive`(S_`early`, `'derived'`, \emptyset), x)$
        Handshake traffic key: $K_{`handshake`_b} <- `Derive`(S_`handshake`, `'s\ hs\ traffic'`, `transcript`)$

- S:
    C:
      color: white
      from: |
        $S_`master` <- `Extract`(`Derive`(S_`handshake`,`'derived'`, \emptyset), 0)$

- S:
    C:
      arrow: |
        \{Finished: HMAC($K_`finished`$, transcript)\}$_{K_{`handshake`_b}}$
      from: |
        Finished key: $K_`finished` <- `Derive`(K_{`handshake`_b}, `'finished'`, `transcript`)$

- S:
    C:
      arrow: |
        \{Application Data\}$_{K_{`b`_0}}$
      from: |
        Application traffic key: $K_{`b`_0} <- `Derive`(S_`master`, `'s\ ap\ traffic'`, `transcript`)$

- C:
    S:
      arrow: |
        \{EndOfEarlyData\}$_{K_{`early`}}$

- C:
    S:
      arrow: |
        \{Finished: HMAC($K_`finished`$, transcript)\}$_{K_{`handshake`_a}}$
      from: |
        Finished key: $K_`finished` <- `Derive`(K_{`handshake`_a}, `'finished'`, `transcript`)$


- S:
    C:
      arrow: |
        \{Application Data\}$_{K_{`b`_0}}$

- C:
    S:
      arrow: |
        \{Application Data\}$_{K_{`a`_0}}$
      from: |
        Application traffic key: $K_{`a`_0} <- `Derive`(S_`master`, `'c\ ap\ traffic'`, `transcript`)$
